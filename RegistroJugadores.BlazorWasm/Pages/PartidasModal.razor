@inject IPartidasApiService partidasApiService
@inject IJugadoresApiService jugadoresApiService

<style>
    .table-responsive {
        max-height: 400px;
        overflow-y: auto;
    }

    .partida-item {
        transition: background-color 0.2s;
    }
</style>

<!-- Modal de Lista de Partidas -->
<div class="modal fade @(IsOpen ? "show d-block" : "")" tabindex="-1" style="@(IsOpen ? "background-color: rgba(0,0,0,0.5);" : "")">
    <div class="modal-dialog modal-dialog-scrollable">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Partidas Disponibles</h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (loadingPartidas)
                {
                    <div class="text-center">
                        <div class="spinner-border" role="status">
                            <span class="visually-hidden">Cargando...</span>
                        </div>
                    </div>
                }
                else if (partidas != null && partidas.Any())
                {
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>Jugador 1</th>
                                    <th>Jugador 2</th>
                                    <th>Acción</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var partida in partidas)
                                {
                                    <tr class="partida-item">
                                        <td>@partida.PartidaId</td>
                                        <td>@GetNombreJugador(partida.Jugador1Id)</td>
                                        <td>@GetNombreJugador(partida.Jugador2Id)</td>
                                        <td>
                                            <button class="btn btn-sm btn-primary" @onclick="() => OnSelectPartida(partida.PartidaId)">
                                                Seleccionar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                }
                else
                {
                    <div class="alert alert-info">No hay partidas disponibles.</div>
                }

                @if (!string.IsNullOrWhiteSpace(errorMessage))
                {
                    <div class="alert alert-danger mt-3">@errorMessage</div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Close">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool IsOpen { get; set; }

    [Parameter]
    public EventCallback<bool> IsOpenChanged { get; set; }

    [Parameter]
    public EventCallback<int> OnPartidaSelected { get; set; }

    private bool loadingPartidas = false;
    private List<PartidaResponse>? partidas;
    private List<JugadorResponse>? jugadores;
    private string? errorMessage;

    protected override async Task OnParametersSetAsync()
    {
        if (IsOpen && partidas == null)
        {
            await LoadPartidas();
        }
    }

    private async Task LoadPartidas()
    {
        loadingPartidas = true;
        errorMessage = null;

        var responsePartidas = await partidasApiService.GetPartidasAsync();
        if (responsePartidas is Resource<List<PartidaResponse>>.Success success)
        {
            partidas = success.Data;
        }
        else if (responsePartidas is Resource<List<PartidaResponse>>.Error error)
        {
            errorMessage = $"Error al cargar partidas: {error.Message}";
            loadingPartidas = false;
            return;
        }

        var responseJugadores = await jugadoresApiService.GetJugadoresAsync();
        if (responseJugadores is Resource<List<JugadorResponse>>.Success successJugadores)
        {
            jugadores = successJugadores.Data;
        }
        else if (responseJugadores is Resource<List<JugadorResponse>>.Error errorJugadores)
        {
            errorMessage = $"Error al cargar jugadores: {errorJugadores.Message}";
        }

        loadingPartidas = false;
    }

    private async Task OnSelectPartida(int partidaId)
    {
        await OnPartidaSelected.InvokeAsync(partidaId);
        await Close();
    }

    private async Task Close()
    {
        partidas = null;
        errorMessage = null;
        await IsOpenChanged.InvokeAsync(false);
    }

    private string GetNombreJugador(int? jugadorId)
    {
        if (jugadorId == null)
        {
            return "(sin jugador)";
        }

        var jugador = jugadores.FirstOrDefault(j => j.JugadorId == jugadorId);
        return jugador?.Nombres ?? $"(ID {jugadorId})";
    }
}